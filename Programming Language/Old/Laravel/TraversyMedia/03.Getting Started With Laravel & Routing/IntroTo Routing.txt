OK, so now we're going to get into routing and routes. Define endpoints or URLs for your application to direct incoming Http://requests from the client. Meaning that when a user visits a URL. So for instance let's say we go to slash jobs, which right now we're going to get a 404 because nothing exists there.But this is is an end point or route that we want to respond to. Now usually what you'll do is set this to to some kind of controller method. Like we'll have a job controller with an index method. And then any, any functionality in there is what we would show here, whether it's loading a view or.Submitting something, whatever it might be, and we can accept different types of of Http://requests, whether that's GET, POST, PUT, etcetera. Now we're going to get into controllers later, but you don't have to respond with a controller method. You can load a view directly, which is actually what's happening here on the home route.This welcome view, or you could just return like a string or a boolean. So we're going to jump into the main route file, which is going to be in the routes folder. And then web dot PHP and you'll see what we have here is this route facade that's being brought in, which is just a class, and that class has a bunch of methods on it, including get.And these methods pertain to the type of Http://requests that's coming in. So this handles a GET request to this route, which is just slash, which represents, you know, just the home page or the route, whatever you want to call it. And then the second argument that's passed in is a closure, which is just a function that's passed into another function.And in this case, it's returning a view called Welcome. So it's looking in this resources views folder for this welcome dot blade file. Alright, so that's what this particular route is doing. So let's create our own route. So we'll take the Route facade and we'll use the GET method, which is going to respond to a GET request. And let's say we.Hit slash jobs or we want to handle what happens when someone hits slash jobs. Then we'll add our closure here and let's just return a string and we'll say available jobs.Save that and if I go to slash jobs now we see available jobs in the browser. OK, so you can return anything you want from a route and you can have it do whatever you want. I could also put HTML in here so I could do like wrapping H1 around this.And the browser should parse it and the content type will change from text plain to text HTML because Laravel, well, it does it on its own. Notice we're not returning a content type or anything like that. That happens behind the scenes. Alright, so a lot happens behind the scenes with Laravel.So we can handle other types of methods. So for instance, let's say route and let's handle a POST request to let's say slash submit and then we'll have a function.And when we submit here, we'll just return again, we'll return a string and justice say, we'll say submitted. Now, normally when you have a post request, right, or a post route, we, we're going to submit a form to this. And typically you, you add something to a database or or whatever, send an e-mail, whatever you're going to do now.I'm not gonna create a form just to test this out, so let's use curl, which allows us to make Http://requests. So I'm gonna open up a terminal here and we're gonna make a request with curl, DASH uppercase X POST 'cause it's a POST request to HTTP, and then whatever your local domain is.So say work opia.Work opia dot test slash and then I want to hit that submit route that I just created. Alright now notice I'm not getting the submitted string. I'm getting this 419 error and I'm getting this because Laravel has built in protection for cross site request forgeries which is where someone tries to submit to a one of your routes from.A different domain or from a different website. So there's built in support to where when you have a view with a form in it, you have to add in the form at CSRF, and then Laravel will know that that form is coming from your site 'cause that that actually generates a hidden field that includes a token. Now we're not.Doing that because I'm making a curl request, so we're gonna get this error. This is supposed to happen. It's it's a security measure. However, if I do want to be able to make requests like this, I could go into the bootstrap folder and then the app dot PHP file and where it says with middleware we can actually.Put here certain routes that we don't want to have that CSRF protection for. So I can take this middleware, this middleware object and we can call this validate CSRF tokens and pass in except.And then an array of routes that we don't want to use that protection for. So we'll say slash submit and just make sure you put a semi colon there. Alright, so now if I go back to my terminal and I make that POST request again, now it works because that particular route submit.is it we don't need that that special token anymore alright and